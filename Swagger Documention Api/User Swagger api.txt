openapi: 3.0.3
info:
  title: User Service 
  description: This is the API documentation for the User service from the Rating Service project, which is part of a microservice architecture for ratings.
  version: 1.0.0 
  
paths:
  /adduser:
    post:
      description: "Add User details"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserRequest'
      responses:
        '201':
          description: "User created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userIdResponse'
                    
  /updateuser:
    put:
      description: "Update User details "
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateUserRequest"
      responses:
        '200':
          description: "User updated Successfully"
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/userIdResponse"
               
  /updatepassword:
    put:
      description: "Update User Password. Checks if the user exists by email before updating the password."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updatePassword"
      responses:
       '204':
          description: "Password Updated successfully"
       
  /getAlluser:
    get:
      description: "Retrieve all users who are active (is_active = 1)."
      responses:
        '200':
          description: "Retrieve all users who are active (is_active = 1)."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userList"
                
  /user/{userId}:
    get: 
      description: "Get  User detail by user id who is active (is_active = 1)"
      parameters:
        - name: userId
          in: path
          required: true
          description: "The ID of the user to retrieve"
          schema:
            type: 
              integer
      responses:
        '200':
          description: "Get  User detail by user id who is active (is_active = 1)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
     
          
  /deleteuser/{userId}:
    delete:
      description: "Delete a user from the system by userId"
      parameters:
        - name: userId
          in: path
          required: true
          description: "The ID of the user to delete"
          schema:
            type: integer
      responses:
        '204':
          description: "User deleted successfully"


  /auth/access-control/{userId}:
    put:
      description: "Toggle the 'is_active' status of a user. If the current status is 1 (active), set it to 0 (inactive). If the current status is 0 (inactive), set it to 1 (active)."
      parameters:
        - name: userId
          in: path
          required: true
          description: "The ID of the user whose status needs to be updated."
          schema:
            type: integer
      responses:
        '200':
          description: "User status toggled successfully."
  
  
  /addAdmin:
    post:
      description: "Add Admin details"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserRequest'
      responses:
        '201':
          description: "User created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userIdResponse'
                
  /admincount:
    get:
      description: "Retrieve the current count of admins."
      responses:
        '200':
          description: "Admin count retrieved successfully."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adminCountResponse'
  
  /loadByUsername:
    get:
      description: "Retrieve User details by email address."
      parameters:
        - name: email
          in: query
          required: true
          description: "The email address of the user to retrieve"
          schema:
            type: string
            format: email
      responses:
        '200':
          description: "Retrieve User details by email address."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
          
components:
  schemas:
    userIdResponse:
      type: object
      properties:
        userId:
          type: integer

    user:
      type: object
      properties:
        userId:
          type: integer
        name:
          type: string
        email:
          type: string
        status:
          type: string
        created_at:         
          format: date
          
    userList:
      type: array
      items:
        $ref: "#/components/schemas/user"
            
    createUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
          
    updateUserRequest:
      type: object
      properties:
        userId:
          type: integer
        name:
          type: string
        email:
          type: string
  
    updatePassword:
      type: object
      properties:
        email:
          type: string
          format: email
          description: "Email of the user whose password needs to be updated"
        password:
          type: string
          format: password
          description: "The new password for the user"
    
    adminCountResponse:
      type: object
      properties:
        adminCount:
          type: integer

    loginResponse:
      type: object
      properties:
        userId:
          type: integer
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role: 
          type: string      
    
      
  
          
          
          
          