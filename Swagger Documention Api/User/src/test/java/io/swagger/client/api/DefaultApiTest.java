/*
 * User Service
 * This is the API documentation for the User service from the Rating Service project, which is part of a microservice architecture for ratings.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.AdminCountResponse;
import io.swagger.client.model.CreateUserRequest;
import io.swagger.client.model.LoginResponse;
import io.swagger.client.model.UpdatePassword;
import io.swagger.client.model.UpdateUserRequest;
import io.swagger.client.model.User;
import io.swagger.client.model.UserIdResponse;
import io.swagger.client.model.UserList;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * 
     *
     * Add Admin details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addAdminPostTest() throws Exception {
        CreateUserRequest body = null;
        UserIdResponse response = api.addAdminPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Add User details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void adduserPostTest() throws Exception {
        CreateUserRequest body = null;
        UserIdResponse response = api.adduserPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve the current count of admins.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void admincountGetTest() throws Exception {
        AdminCountResponse response = api.admincountGet();

        // TODO: test validations
    }
    /**
     * 
     *
     * Toggle the &#x27;is_active&#x27; status of a user. If the current status is 1 (active), set it to 0 (inactive). If the current status is 0 (inactive), set it to 1 (active).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void authAccessControlUserIdPutTest() throws Exception {
        Integer userId = null;
        api.authAccessControlUserIdPut(userId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete a user from the system by userId
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteuserUserIdDeleteTest() throws Exception {
        Integer userId = null;
        api.deleteuserUserIdDelete(userId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve all users who are active (is_active &#x3D; 1).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAlluserGetTest() throws Exception {
        UserList response = api.getAlluserGet();

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve User details by email address.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void loadByUsernameGetTest() throws Exception {
        String email = null;
        LoginResponse response = api.loadByUsernameGet(email);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update User Password. Checks if the user exists by email before updating the password.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatepasswordPutTest() throws Exception {
        UpdatePassword body = null;
        api.updatepasswordPut(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update User details 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateuserPutTest() throws Exception {
        UpdateUserRequest body = null;
        UserIdResponse response = api.updateuserPut(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get  User detail by user id who is active (is_active &#x3D; 1)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userUserIdGetTest() throws Exception {
        Integer userId = null;
        User response = api.userUserIdGet(userId);

        // TODO: test validations
    }
}
